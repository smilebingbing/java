1.Filter:

1). Filter 是什么

--1--  JavaWEB 的一个重要组件，可以对发送到Servlet 的请求进行拦截，并对响应也进行拦截
--2--  Filter 是实现了Filter 接口的Java类
--3--  Filter 需要在web.xml文件中进行配置和映射

2). 如何创建一个Filter， 并把他跑起来

--1--  创建一个Filter 类: 实现Filter 接口  public class HelloFilter implements Filter
--2--  在web.xml 文件中配置并映射该Filter, 其中url-pattern 指定该Filter 可以拦截哪些资源，即可以通过哪些url访问到该Filter
	<!-- 注册Filter -->
	<filter>
		<filter-name>helloFilter</filter-name>
		<filter-class>com.atguigu.javaweb.HelloFilter</filter-class>
	</filter>
	
	<!-- 映射Filter -->
	<filter-mapping>
		<filter-name>helloFilter</filter-name>
		<url-pattern>/test.jsp</url-pattern>
	</filter-mapping>
3). Filter 相关的API:

--1--  Filter 接口

> 	public void init(FilterConfig filterConfig) throws ServletException 类似于Servlet 的init 方法，
		在创建Filter对象后（Filter 对象在Servlet 容器加载当前WEB应用时即被创建），
  		  立即被调用，且只调用一次，该方法用于对当前的Filter进行初始化操作。Filter 实例是单例的
  		 *  FilterConfig 类似于ServletConfig
  		 *  可以在web.xml 文件中配置当前Filter 的初始化参数

>   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			真正Filter 的逻辑代码需要编写在该方法中，每次拦截都会调用该方法
			
			* FilterChain: Filter链，多个Filter 可以构成一个Filter 链
			
			-doFilter(ServletRequest request,ServletResponse response)
			把请求传给Filter 链的下一个Filter,若当前Filter 是Filter 链的最后一个Filter,将把请求给到目标Servlet(或JSP)
			
			-多个Filter 拦截的顺序和<filter-mapping>配置的顺序有关，靠前的先被调用
>  public void destroy() 
	释放当前Filter所占用的资源的方法，在Filter 被销毁之前被调用，且只被调用一次
