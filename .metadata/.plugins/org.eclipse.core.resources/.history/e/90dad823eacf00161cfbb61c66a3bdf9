package com.atguigu.mvcapp.dao;

import java.lang.reflect.Type;
import java.util.List;

import org.apache.commons.dbutils.QueryRunner;

/**
 * 
 * 封装了基本的CRUD的方法，以供子类继承使用
 * 当前DAO直接在方法中获取数据库连接。
 * 整个DAO采取DButiles解决方法
 * @param <T>: 当前DAO处理的实体类的类型是什么
 */
public class DAO<T>{
	
	private QueryRunner queryRunner = new QueryRunner();
	
	private Class<T> clazz;
	
	public DAO(){
		Type superClass= supergetClass().getGenericSuperclass();
	}
	
	/**
	 * 返回某一个字段的值，例如返回某一条记录的customerName, 或返回数据表中有多少条记录等
	 * @param sql
	 * @param args
	 * @return
	 */
	
	public <E> E getForValue(String sql, Object...args){
		return null;
	}
	/**
	 * 返回T所对应的List
	 * @param sql
	 * @param args
	 * @return
	 */
	public List<T> getForList(String sql,Object...args){
		return null;
		
	}
	
	/**
	 * 返回对应的T的一个实体类的对象
	 * @param sql
	 * @param args
	 * @return
	 */
	public T get(String sql,Object...args){
		return null;
	}
	/**
	 * 该方法封装了insert delete update 操作
	 * @param sql : sql语句
	 * @param args: 填充SQL语句的占位符
	 */

	public void update (String sql,Object ... args){
		
	}

}
