package com.atguigu.mvcapp.servlet;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.atguigu.mvcapp.dao.CriteriaCustomer;
import com.atguigu.mvcapp.dao.CustomerDAO;
import com.atguigu.mvcapp.dao.impl.CustomerDAOJdbcImpl;
import com.atguigu.mvcapp.domain.Customer;


public class CustomerServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private CustomerDAO customerDAO = new CustomerDAOJdbcImpl();
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doPost(request, response);
	
	}


	//protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	//	String method =request.getParameter("method");
		
	//	switch(method){
	//	case "add":add(request,response);break;
	//	case "query": query(request,response);break;
	//	case "delete": delete(request,response);break;
				
	//	}
	
	
	//}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		//1.获取ServletPath:/edit.do 或/addCustomer.do
		
		String servletPath =req.getServletPath();
		//2.去除/和.do，得到类似于edit这样的字符串
		String methodName =servletPath.substring(1);
		methodName=methodName.substring(0, methodName.length()-3);

		try {
			//3.利用反射获取methodName对应的方法
			Method method =getClass().getDeclaredMethod(methodName, HttpServletRequest.class,HttpServletResponse.class);
			//4.利用反射调用对应的方法
			method.invoke(this,req,resp);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
			//可以有一些响应
			resp.sendRedirect("error.jsp");
		}
		
	}
	

	private void edit(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		// TODO Auto-generated method stub
		System.out.println("edit");
	}

	
	private void update(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		// TODO Auto-generated method stub
		System.out.println("update");
	}


	private void delete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		
		String idStr =request.getParameter("id");
		int id =0;
		
		try {
			id=Integer.parseInt(idStr);
			customerDAO.delete(id);
		} catch (Exception e) {
			// TODO: handle exception
			response.sendRedirect("query.do");
		}
		
	}


	private void query(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{

		//获取模糊查询的请求参数
		String name =request.getParameter("name");
		String phone =request.getParameter("phone");
		String address = request.getParameter("address");
		
		//把请求参数封装为一个CriteriaCustomer对象
		CriteriaCustomer cc = new CriteriaCustomer(name,address,phone);
				
				
		
		//1.调用CustomerDAO 的getAll()方法，得到Customer 的集合
		List<Customer> customers =customerDAO.getForListWithCriteriaCustomer(cc);
		
		//2.把Customer 的集合放入request中
		request.setAttribute("customers",customers);
		//3. 转发页面到index.jsp(不能使用重定向）
		request.getRequestDispatcher("/index.jsp").forward(request, response);
		
	}


	private void addCustomer(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		
					
		//1. 获取表单参数： name,address,phone
		
		//2. 检验name是否已经被占用
		
		//2.1  调用CustomerDAO 的 getCountWithName(String name) 获取name 在数据库中是否存在
		
		//2.2  若返回值大于0，则响应 newcustomer.jsp页面，:
		// 通过转发的方式来响应newcustomer.jsp
		
		//2.2.1 要求在newcustomer.jsp页面像是一个错误消息:用户名name已经被占用，请重新选择!
		// 在request 中放入一个属性message:用户名name已经被占用，请重新选择!
		// 在页面上通过request.getAttribute("message")的方式来显示
		
		//2.2.2 newcustomer.jsp 的表单值可以回显。
		
		//2. 把表单参数封装为一个Customer 对象customer
		
		//3. 调用CustomerDAO 的 save(Customer customer) 执行保存操作
		
		//4. 重定向到success.jsp页面，
		
		System.out.println(request.getParameter("name"));
		request.getRequestDispatcher("/newcustomer.jsp").forward(request, response);
	}

}
