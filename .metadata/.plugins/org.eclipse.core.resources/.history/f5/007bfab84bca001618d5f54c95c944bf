1.部署并启动tomcat服务器
1).解压apache-tomcat.zip到非中文目录下
2).配置一个环境变量 java_home(指向jdk安装的根目录)或jre_home
3).通过apache-tomcat\bin目录下的startup.bat，启动服务器
4).可以在浏览器中输入localhost:8080来检验tomcat安装是否正确
5).若 已经启动一个tomcat应用，若再启动同一个tomcat应用，会抛出异常，
java.net.BindException:Address already in use:JVM_Bind:8080
因为端口已经被占用了

2.Tomcat:开源的Servlet容器。

3.可以通过修改server.xml文件中的配置信息来修改tomcat服务器的端口号:

<Connector port="8080" protocol="HTTP/1.1"
           connectionTimeout="20000"
           redirectPort="8443" />
           
把port的值改为其他的端口号即可

4. 为了可以在任意目录下启动tomcat服务器
4.1 把D:\install file\apache\bin添加到Path下

添加成功后，若在任意目录下通过startup启动tomcat服务器，会有提示

the catalina_home environment variable is not defined correctly
this environment varable is needed to run this program

即要求设置CATALINA_HOME这个环境变量

5. 设置CATALINA_HOME环境变量
5.1 通过阅读startup.bat批处理文件，可知CATALINA_HOME环境变量下有一个bin目录，而bin目录下又有一个
catalina.bat文件，由此可知CATALINA_HOME指向的应该是TOMCAT安装的根目录

于是把Tomcat的根目录设为CATALINA_HOME环境变量

此时既可以在任意目录下通过startup.bat、shutdown.bat启动关闭Tomcat服务器
6. 继续阅读startup.bat文件，发现启动tomcat服务器的是catalina.bat文件

在命令行窗口直接输入catalina，提示如下

commands:
......
catalina命令有如上的可选参数

run:在catalina 同一个命令行窗口下启动服务器
start:开启一个新窗口启动服务器
stop:关闭服务器

7.第一个WEB应用程序：开发，并部署到Tomcat服务器下运行

1).在Eclipse 新建一个Java Project
2).在Java项目下创建WEB开发的目录结构
-WebContent
	-WEB-INF
		-classes(编译后的class 文件必须放在该目录下)
		-lib
		-web.xml
	html页面
	JSP页面
	图片...
	
3). 在src 下新建一个Person类

package com.atguigu.test;

public class Person {

	public String getPersonInfo(){
		return "person--info";
	}
}

4).手工的Person类对应的class文件（含包）复制到classes目录下

可以通过修改默认地输出目录达到自动把编译好的class放到classes目录下

5).在webContent 目录下新建一个JSP文件
<%
           
           Person person = new Person();
           System.out.print(person.getPersonInfo());
     %>
6).把webcontent目录复制到tomcat的webapps目录下，并改名为：helloworld
7).在浏览器中输入local:8080\helloworld\hello.jsp