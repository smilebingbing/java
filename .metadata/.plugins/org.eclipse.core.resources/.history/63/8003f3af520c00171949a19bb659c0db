package com.java.offer;
//按之字形顺序打印二叉树
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Queue;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution30 {
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {

    	ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
    	ArrayList<Integer> list = new ArrayList<Integer>();
    	Queue<TreeNode> queue = new LinkedList<TreeNode>();
    	if(pRoot == null){
    		return result;
    	}
    	TreeNode cur = null;
    	queue.offer(pRoot);
    	int start = 0;
    	int end = 1;
    	while(!queue.isEmpty()){
    		cur = queue.poll();
    		list.add(cur.val);
    		start ++;
    		if(cur.left != null){
    			queue.offer(cur.left);
    		}
    		if(cur.right != null){
    			queue.offer(cur.right);
    		}
    		if(start == end){
    			end = queue.size();
    			result.add(list);
    			list = new ArrayList<Integer>();
    			start = 0;
    		}
    			
    	}
    	for(int i = 0;i < result.size();i ++){
    		if(i % 2 != 0){
    			Collections.reverse(result);
    			
    		}
    	}
    	return result;
    	
    }
    
    public static ArrayList<Integer> reverse(ArrayList<Integer> list){
    	ArrayList<Integer> li = new ArrayList<Integer>();
    	ListIterator<Integer> iter = list.listIterator();
    	for(iter = list.listIterator();iter.hasNext();){
    		iter.next();
    	}
    	for(; iter.hasPrevious() ;){
    		li.add(iter.previous());
    	}
    	return li;
    }
    

}
